/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[1,20],$V3=[1,18],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,39],$Va=[2,9],$Vb=[2,7,12,28,29,30,31,32],$Vc=[2,30],$Vd=[1,43],$Ve=[1,42],$Vf=[1,44],$Vg=[2,21],$Vh=[1,57],$Vi=[2,7,9,10,12,21,27,28,29,30,31,32,42,44,45,47,48,49,50,51,52,53,56,57,58,59,62,80,84,86,88,92,93,94],$Vj=[2,7,9,12,28,29,30,31,32,62,80,84,86,88,92,93,94],$Vk=[1,71],$Vl=[1,76],$Vm=[1,77],$Vn=[1,78],$Vo=[1,79],$Vp=[1,80],$Vq=[1,72],$Vr=[1,70],$Vs=[1,73],$Vt=[1,108],$Vu=[1,107],$Vv=[1,103],$Vw=[1,104],$Vx=[1,105],$Vy=[1,106],$Vz=[1,109],$VA=[1,110],$VB=[1,111],$VC=[1,120],$VD=[1,121],$VE=[1,122],$VF=[1,123],$VG=[1,124],$VH=[1,125],$VI=[1,126],$VJ=[1,127],$VK=[1,128],$VL=[1,129],$VM=[1,130],$VN=[1,131],$VO=[1,132],$VP=[2,21,27,42,44,45,47,48,49,50,51,52,53,56,57,58,59],$VQ=[2,37],$VR=[2,9,12,28,29,30,31,32,62,80,84,86,88,92,93,94],$VS=[2,21,27,42,44,45,47,48,49,56,57,58,59],$VT=[2,21,27,42,44,45,47,48,49,50,51,56,57,58,59],$VU=[2,21,27,42,44,45,47,58,59],$VV=[1,244],$VW=[1,290];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Clas":3,"Clases":4,"EOF":5,"Inicio":6,"Public":7,"Tipo":8,"ID":9,"LLA":10,"Bloque":11,"LLC":12,"Class":13,"Interface":14,"Metodo":15,"Variable":16,"Funcion":17,"ERROR":18,"TipoDato":19,"Identificador":20,"PYC":21,"RECUPERACION":22,"Mas":23,"MasId":24,"IGUAL":25,"Exp":26,"Coma":27,"Int":28,"Boolean":29,"Double":30,"STring":31,"Char":32,"Valor":33,"Numero":34,"Cadena":35,"True":36,"False":37,"Caracter":38,"Parentesis":39,"PA":40,"DentroP":41,"PC":42,"MP":43,"Or":44,"XOR":45,"Not":46,"And":47,"MayorQ":48,"MenorQ":49,"MAS":50,"MENOS":51,"POR":52,"DIV":53,"Incremento":54,"Decremento":55,"MayorI":56,"MenorI":57,"IgualI":58,"DiferenteI":59,"Llamados":60,"Inprimir":61,"SYstem_":62,"Punto":63,"Out":64,"PRINT":65,"Print":66,"Println":67,"Retorno":68,"Parametro":69,"Codigo":70,"Void":71,"PArametro":72,"Static":73,"Main":74,"CA":75,"CC":76,"ARG":77,"MParametro":78,"IF":79,"If":80,"ELSE":81,"Else":82,"FOR":83,"For":84,"WHILE":85,"While":86,"DO":87,"Do":88,"Asignacion":89,"Llamado":90,"Retornos":91,"Break":92,"Continue":93,"Return":94,"INCREMENTO":95,"DECREMENTO":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Public",9:"ID",10:"LLA",12:"LLC",13:"Class",14:"Interface",21:"PYC",25:"IGUAL",27:"Coma",28:"Int",29:"Boolean",30:"Double",31:"STring",32:"Char",34:"Numero",35:"Cadena",36:"True",37:"False",38:"Caracter",40:"PA",42:"PC",44:"Or",45:"XOR",46:"Not",47:"And",48:"MayorQ",49:"MenorQ",50:"MAS",51:"MENOS",52:"POR",53:"DIV",54:"Incremento",55:"Decremento",56:"MayorI",57:"MenorI",58:"IgualI",59:"DiferenteI",62:"SYstem_",63:"Punto",64:"Out",66:"Print",67:"Println",71:"Void",72:"PArametro",73:"Static",74:"Main",75:"CA",76:"CC",77:"ARG",80:"If",82:"Else",84:"For",86:"While",88:"Do",92:"Break",93:"Continue",94:"Return"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,5],[8,1],[8,1],[11,2],[11,2],[11,2],[11,1],[11,1],[11,1],[11,2],[11,1],[16,3],[16,4],[16,3],[20,2],[20,1],[23,1],[23,3],[23,2],[24,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[39,3],[39,2],[41,2],[41,1],[43,3],[43,2],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,1],[26,1],[61,9],[61,8],[61,3],[65,1],[65,1],[65,1],[15,2],[15,8],[15,7],[15,7],[15,6],[15,3],[17,6],[17,7],[17,6],[17,7],[17,3],[68,8],[68,7],[68,7],[68,6],[68,8],[68,7],[68,7],[68,6],[68,12],[68,11],[68,5],[68,5],[68,5],[68,4],[68,4],[68,4],[69,3],[69,2],[78,2],[79,8],[79,7],[79,7],[79,6],[79,7],[79,6],[81,2],[81,4],[81,3],[81,3],[83,14],[83,13],[83,5],[83,4],[85,7],[85,6],[85,5],[85,4],[87,8],[87,7],[87,3],[89,4],[89,3],[90,5],[90,4],[90,3],[60,4],[60,3],[60,3],[91,2],[91,2],[91,3],[91,3],[91,3],[91,3],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,2],[70,1],[95,3],[95,3],[96,3],[96,3],[22,1],[22,1],[22,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
     traductor.Lista($$[$0-1]);
            traductor.Tokens(ListaTo);
            traductor.Errores(ER);
            ListaTo = [];
            ER = [];
            a = 1;
            numError = 1;
            return traductor;
break;
case 2:
 $$[$0-1].push($$[$0]);
                        this.$ = $$[$0-1];
break;
case 3:
this.$ = [$$[$0]];
break;
case 4:
this.$ = new Clase($$[$0-4], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 5:
this.$ = new Clase($$[$0-3], $$[$0-2], new Blanco(), this._$.first_line, this._$.first_column);
break;
case 6: case 7: case 68:
this.$ = $$[$0]
break;
case 8: case 9: case 10:
this.$ = new Bloque($$[$0-1], $$[$0]);
break;
case 11: case 12: case 13:
this.$ = new Bloque($$[$0], new Blanco());
break;
case 16:
this.$ = new Variable($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 19:
this.$ = new Identificador($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 20:
this.$ = new Identificador($$[$0], new Blanco(), this._$.first_line, this._$.first_column);
break;
case 21: case 25: case 26: case 27: case 28: case 29: case 31: case 32: case 33: case 34: case 35: case 36: case 63: case 67: case 70:
this.$ = $$[$0];
break;
case 22:
this.$ = new Mas($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 23:
this.$ = new Mas($$[$0], new Blanco(), this._$.first_line, this._$.first_column);
break;
case 24:
this.$ = new MasId($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 38:
this.$ = new Parentesis($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 39:
this.$ = new Parentesis(new Blanco(), this._$.first_line, this._$.first_column);
break;
case 40:
this.$ = new DentroP($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 41:
this.$ = new DentroP($$[$0], new Blanco(), this._$.first_line, this._$.first_column);
break;
case 42:
this.$ = new MP($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 43:
this.$ = new MP($$[$0], new Blanco(), this._$.first_line, this._$.first_column);
break;
case 44: case 45: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 57: case 58: case 59: case 60:
this.$ = new Exprecion($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 46:
this.$ = new Exprecion(new Blanco(), $$[$0], $$[$01], this._$.first_line, this._$.first_column);
break;
case 54: case 55:
this.$ = new Exprecion(new Token($$[$0-1]), $$[$0], new Blanco(), this._$.first_line, this._$.first_column);
break;
case 56:
this.$ = new Exprecion(new Token("("), $$[$0-1], new Token(")"), this._$.first_line, this._$.first_column);
break;
case 61:
this.$ = new Exprecion(new Blanco(), $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 62:
this.$ = new Token($$[$0]);
break;
case 64:
this.$ = new Imprimir($$[$0-4], $$[$0-2]);
break;
case 65:
this.$ = new Imprimir($$[$0-3], new Blanco());
break;
case 71:
this.$ = new Constructor($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 72:
this.$ = new Constructor($$[$0-5], new Blanco(), $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 73:
this.$ = new Constructor($$[$0-5], $$[$0-3], new Blanco(), this._$.first_line, this._$.first_column)
break;
case 74:
this.$ = new Constructor($$[$0-4], new Blanco(), new Blanco(), this._$.first_line, this._$.first_column);
break;
case 76: case 78:
this.$ = new Funcion($$[$0-3], new Blanco(), this._$.first_line, this._$.first_column);
break;
case 77: case 79:
this.$ = new Funcion($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 81: case 85:
this.$ = new Metodo($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 82: case 86:
this.$ = new Metodo($$[$0-5], new Blanco(), $$[$0-1]);
break;
case 83: case 87:
this.$ = new Metodo($$[$0-5], $$[$0-3], new Blanco());
break;
case 84: case 88:
this.$ = new Metodo($$[$0-4], new Blanco(), new Blanco());
break;
case 89:
this.$ = new Metodo($$[$0-9], new Blanco(), $$[$0-1]);
break;
case 90:
this.$ = new Metodo($$[$0-8], new Blanco(), new Blanco());
break;
case 97:
this.$ = new Parametro($$[$0-1], $$[$0]);
break;
case 98:
this.$ = new Parametro($$[$0], new Blanco());
break;
case 99:
this.$ = new MParametro($$[$0]);
break;
case 100:
this.$ = new If($$[$0-5], $$[$0-2], $$[$0]);
break;
case 101:
this.$ = new If($$[$0-4], $$[$0-1], new Blanco());
break;
case 102:
this.$ = new If($$[$0-4], new Blanco(), $$[$0]);
break;
case 103:
this.$ = new If($$[$0-3], new Blanco(), new Blanco());
break;
case 106:
this.$ = new ElseIf($$[$0-1], $$[$0]);
break;
case 107:
this.$ = new Else($$[$0-3], $$[$0-1]);
break;
case 108:
this.$ = new Else($$[$0-2], new Blanco());
break;
case 110:
this.$ = new For($$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 111:
this.$ = new For($$[$0-9], $$[$0-7], $$[$0-5], $$[$0-3], new Blanco());
break;
case 114:
this.$ = new While($$[$0-4], $$[$0-1]);
break;
case 115:
this.$ = new While($$[$0-3], new Blanco());
break;
case 118:
this.$ = new Do($$[$0-5], $$[$0-1]);
break;
case 119:
this.$ = new Do(new Blanco(), $$[$0-1]);
break;
case 121:
this.$ = new Asignacion($$[$0-3], $$[$0-1]);
break;
case 123:
this.$ = new Llamado($$[$0-4], $$[$0-2]);
break;
case 124:
this.$ = new Llamado($$[$0-3], new Blanco())
break;
case 126:
this.$ = new Llamados($$[$0-3], $$[$0-1]);
break;
case 127:
this.$ = new Llamados($$[$0-2], new Blanco())
break;
case 129: case 130:
this.$ = new Retorno($$[$0-1], new Blanco());
break;
case 131:
this.$ = new Retorno($$[$0-2], $$[$0-1]);
break;
case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145:
this.$ = new Codigo($$[$0-1], $$[$0]);
break;
case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156:
this.$ = new Codigo($$[$0], new Blanco());
break;
case 159: case 161:
this.$ = new Exprecion(new Token($$[$0-2]), $$[$0-1], new Blanco(), this._$.first_line, this._$.first_column);
break;
case 166:
Agregar("Sintactico", this._$.first_line, this._$.first_column, yytext)
break;
}
},
table: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5],6:6,7:$V0},o($V1,[2,3]),{8:7,13:[1,8],14:[1,9]},{1:[2,1]},o($V1,[2,2]),{9:[1,10]},{9:[2,6]},{9:[2,7]},{10:[1,11]},{2:$V2,7:$V3,11:12,12:[1,13],15:14,16:15,17:16,18:17,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},{12:[1,26]},o($V1,[2,5]),{2:$V2,7:$V3,11:27,12:[2,11],15:14,16:15,17:16,18:17,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},{2:$V2,7:$V3,11:28,12:[2,12],15:14,16:15,17:16,18:17,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},{2:$V2,7:$V3,11:29,12:[2,13],15:14,16:15,17:16,18:17,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},o([9,12],[2,15],{15:14,16:15,17:16,18:17,19:19,11:30,2:$V2,7:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8}),{2:$V2,9:[1,32],18:33,19:35,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,68:31,71:[1,34],73:[1,36]},{2:$V2,9:$V9,18:38,20:37},o([2,7,9,10,12,21,27,28,29,30,31,32,40,42,44,45,47,48,49,50,51,52,53,56,57,58,59,62,80,84,86,88,92,93,94],[2,166]),o($Va,[2,25]),o($Va,[2,26]),o($Va,[2,27]),o($Va,[2,28]),o($Va,[2,29]),o($V1,[2,4]),{12:[2,8]},{12:$Va},{12:[2,10]},{12:[2,14]},o($Vb,[2,70]),{40:[1,40]},o($Va,$Vc,{22:41,12:$Vd,21:$Ve,42:$Vf}),{2:$V2,9:[1,45],18:46},{2:$V2,9:[1,47],18:48},{2:$V2,18:50,71:[1,49]},{2:$V2,18:52,21:[1,51]},{12:$Vd,21:$Ve,22:53,42:$Vf},o($Vg,[2,20],{23:54,24:55,25:[1,56],27:$Vh}),{2:$V2,18:61,19:60,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,42:[1,59],69:58},o($Vb,[2,75]),o($Vi,[2,163]),o($Vi,[2,164]),o($Vi,[2,165]),{40:[1,62]},{10:[1,63]},{40:[1,64]},{10:[1,65]},{74:[1,66]},{10:[1,67]},o($Vj,[2,16]),{12:$Vd,21:$Ve,22:68,42:$Vf},o($Vj,[2,18]),o($Vg,[2,19]),o($Vg,$Vg),{2:$V2,9:$Vk,18:81,26:69,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{9:$V9,20:82},{42:[1,83]},{10:[1,84]},{9:[1,85]},{9:$Vc},{2:$V2,18:61,19:60,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,42:[1,86],69:87,72:[1,88]},{2:$V2,9:$Vt,12:[1,90],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:89,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,18:61,19:60,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,42:[1,112],69:113},{2:$V2,9:$Vt,12:[1,115],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:114,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{40:[1,116]},{2:$V2,9:$Vt,12:[1,118],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:117,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},o($Vj,[2,17]),o($Vg,[2,23],{24:119,27:$Vh,44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO}),{2:$V2,9:$Vk,18:81,26:133,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},o([21,27,42,44,45,47,48,49,50,51,52,53,56,57,58,59],[2,32],{18:137,2:$V2,40:[1,136],54:[1,134],55:[1,135]}),{2:$V2,9:$Vk,18:81,26:138,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:139,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},o($VP,[2,62]),o($VP,[2,63]),o($VP,[2,31]),o($VP,[2,33]),o($VP,[2,34]),o($VP,[2,35]),o($VP,[2,36]),o($VP,$VQ),o($Vg,[2,24]),{10:[1,140]},{2:$V2,9:$Vt,12:[1,142],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:141,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{27:[1,144],42:[2,98],78:143},{10:[1,146],21:[1,145]},{42:[1,147]},{42:[1,148]},{12:[1,149]},o($Vb,[2,94]),{2:$V2,9:$Vt,12:[2,146],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:150,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,147],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:151,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,148],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:152,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,149],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:153,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,150],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:154,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,151],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:155,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,152],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:156,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,153],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:157,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,154],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:158,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,155],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:159,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,156],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:160,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,9:$Vt,12:[2,158],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:161,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{2:$V2,18:163,40:[1,162]},{2:$V2,18:165,40:[1,164]},{2:$V2,18:167,40:[1,166]},{2:$V2,10:[1,168],18:169},{2:$V2,18:171,63:[1,170]},{2:$V2,18:173,25:[1,172],40:[1,174],54:[1,175],55:[1,176]},{2:$V2,18:178,21:[1,177]},{2:$V2,18:180,21:[1,179]},{2:$V2,9:$Vk,18:182,26:181,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{10:[1,184],21:[1,183]},{42:[1,185]},{12:[1,186]},o($Vb,[2,95]),{31:[1,187]},{12:[1,188]},o($Vb,[2,96]),o($Vg,[2,22]),{2:$V2,9:$Vk,18:81,26:189,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:190,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:191,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:192,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:193,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:194,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:195,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:196,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:197,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:198,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:199,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:200,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{2:$V2,9:$Vk,18:81,26:201,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},o($VP,[2,46]),o($VP,[2,54]),o($VP,[2,55]),{2:$V2,9:$Vk,18:81,26:204,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,41:202,42:[1,203],46:$Vr,51:$Vs,60:75},{12:$Vd,21:$Ve,22:205,42:$Vf},{42:[1,206],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},o($VP,[2,61]),{2:$V2,9:$Vt,12:[1,208],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:207,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{12:[1,209]},o($Vb,[2,74]),{42:[2,97]},{2:$V2,18:61,19:60,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,69:210},o($Vb,[2,76]),{2:$V2,9:$Vt,12:[1,212],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:211,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{10:[1,214],21:[1,213]},{10:[1,215]},o($Vb,[2,91]),{12:[2,135]},{12:[2,136]},{12:[2,137]},{12:[2,138]},{12:[2,139]},{12:[2,140]},{12:[2,141]},{12:[2,142]},{12:[2,143]},{12:[2,144]},{12:[2,145]},{12:[2,157]},{2:$V2,9:$Vk,18:81,26:216,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{12:$Vd,21:$Ve,22:217,42:$Vf},{2:$V2,18:61,19:218,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},{10:[1,219]},{2:$V2,9:$Vk,18:81,26:220,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{10:[1,221]},{2:$V2,9:$Vt,12:[1,223],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:222,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{12:$Vd,21:$Ve,22:224,42:$Vf},{64:[1,225]},{12:$Vd,21:$Ve,22:226,42:$Vf},{2:$V2,9:$Vk,18:81,26:227,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{12:$Vd,21:$Ve,22:228,42:$Vf},{2:$V2,9:$Vk,18:81,26:204,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,41:229,42:[1,230],46:$Vr,51:$Vs,60:75},{21:[1,231]},{21:[1,232]},o($VR,[2,129]),{12:$Vd,21:$Ve,22:233,42:$Vf},o($VR,[2,130]),{12:$Vd,21:$Ve,22:234,42:$Vf},{21:[1,235],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},o([44,45,47,48,49,50,51,52,53,56,57,58,59],$VQ,{22:236,12:$Vd,21:$Ve,42:$Vf}),o($Vb,[2,78]),{2:$V2,9:$Vt,12:[1,238],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:237,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{10:[1,240],21:[1,239]},o($Vb,[2,92]),{75:[1,241]},o($Vb,[2,93]),o([2,21,27,42,44,45],[2,44],{47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO}),o([2,21,27,42,45],[2,45],{44:$VC,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO}),o([2,21,27,42,44,45,47],[2,47],{48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO}),o($VS,[2,48],{50:$VH,51:$VI,52:$VJ,53:$VK}),o($VS,[2,49],{50:$VH,51:$VI,52:$VJ,53:$VK}),o($VT,[2,50],{52:$VJ,53:$VK}),o($VT,[2,51],{52:$VJ,53:$VK}),o($VP,[2,52]),o($VP,[2,53]),o($VS,[2,57],{50:$VH,51:$VI,52:$VJ,53:$VK}),o($VS,[2,58],{50:$VH,51:$VI,52:$VJ,53:$VK}),o($VU,[2,59],{48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM}),o($VU,[2,60],{48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM}),{42:[1,242]},o($VP,[2,127]),{27:$VV,42:[2,41],43:243,44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},o($VP,[2,128]),o($VP,[2,56]),{12:[1,245]},o($Vb,[2,73]),o($Vb,[2,72]),{42:[2,99]},{12:[1,246]},o($Vb,[2,84]),o($Vb,[2,77]),{2:$V2,9:$Vt,16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:247,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{12:[1,248]},{42:[1,249],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},{10:[1,250]},{9:[1,251]},{2:$V2,9:$Vt,12:[1,253],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:252,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{42:[1,254],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},{2:$V2,9:$Vt,12:[1,256],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:255,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{12:[1,257]},{86:[1,258]},o($VR,[2,120]),{63:[1,259]},o($VR,[2,66]),{21:[1,260],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},o($VR,[2,122]),{42:[1,261]},{21:[1,262]},o($VR,[2,159]),o($VR,[2,161]),o($VR,[2,132]),o($VR,[2,133]),o($VR,[2,131]),o($VR,[2,134]),{12:[1,263]},o($Vb,[2,88]),o($Vb,[2,79]),{2:$V2,9:$Vt,12:[1,265],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:264,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{76:[1,266]},o($VP,[2,126]),{42:[2,40]},{2:$V2,9:$Vk,18:81,26:267,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},o($Vb,[2,71]),o($Vb,[2,82]),{12:[1,268]},o($Vb,[2,83]),{10:[1,269]},{2:$V2,9:$Vt,12:[1,271],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:270,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{25:[1,272]},{12:[1,273]},o($VR,[2,113]),{10:[1,274]},{12:[1,275]},o($VR,[2,117]),{86:[1,276]},{40:[1,277]},{2:$V2,18:281,65:278,66:[1,279],67:[1,280]},o($VR,[2,121]),{21:[1,282]},o($VR,[2,124]),o($Vb,[2,86]),{12:[1,283]},o($Vb,[2,87]),{77:[1,284]},{27:$VV,42:[2,43],43:285,44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},o($Vb,[2,81]),{2:$V2,9:$Vt,12:[1,287],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:286,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{12:[1,288]},{81:289,82:$VW},{2:$V2,9:$Vk,18:81,26:291,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},o($VR,[2,112]),{2:$V2,9:$Vt,12:[1,293],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:292,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},o($VR,[2,116]),{40:[1,294]},{2:$V2,9:$Vk,18:81,26:295,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{40:[1,296]},{40:[2,67]},{40:[2,68]},{40:[2,69]},o($VR,[2,123]),o($Vb,[2,85]),{42:[1,297]},{42:[2,42]},{12:[1,298]},o($VR,[2,103],{81:299,82:$VW}),{81:300,82:$VW},o($VR,[2,105]),{2:$V2,10:[1,302],18:303,79:301,80:$Vv},{21:[1,304],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},{12:[1,305]},o($VR,[2,115]),{2:$V2,9:$Vk,18:81,26:306,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},{42:[1,307],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},{2:$V2,9:$Vk,18:81,26:308,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,42:[1,309],46:$Vr,51:$Vs,60:75},{10:[1,310]},o($VR,[2,101],{81:311,82:$VW}),o($VR,[2,102]),o($VR,[2,104]),o($VR,[2,106]),{2:$V2,9:$Vt,12:[1,313],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:312,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{12:$Vd,21:$Ve,22:314,42:$Vf},{2:$V2,9:$Vk,18:81,26:315,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},o($VR,[2,114]),{42:[1,316],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},o($VR,[2,119]),{42:[1,317],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},{21:[1,318]},{2:$V2,9:$Vt,12:[1,320],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:319,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},o($VR,[2,100]),{12:[1,321]},o($VR,[2,108]),o($VR,[2,109]),{21:[1,322],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},o($VR,[2,118]),{21:[1,323]},o($VR,[2,65]),{12:[1,324]},o($Vb,[2,90]),o($VR,[2,107]),{2:$V2,9:$Vk,18:81,26:325,33:74,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,40:$Vq,46:$Vr,51:$Vs,60:75},o($VR,[2,64]),o($Vb,[2,89]),{42:[1,326],44:$VC,45:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,56:$VL,57:$VM,58:$VN,59:$VO},{10:[1,327]},{2:$V2,9:$Vt,12:[1,329],16:98,18:102,19:19,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,61:95,62:$Vu,70:328,79:91,80:$Vv,83:92,84:$Vw,85:93,86:$Vx,87:94,88:$Vy,89:96,90:97,91:99,92:$Vz,93:$VA,94:$VB,95:100,96:101},{12:[1,330]},o($VR,[2,111]),o($VR,[2,110])],
defaultActions: {5:[2,1],8:[2,6],9:[2,7],27:[2,8],28:[2,9],29:[2,10],30:[2,14],61:[2,30],143:[2,97],150:[2,135],151:[2,136],152:[2,137],153:[2,138],154:[2,139],155:[2,140],156:[2,141],157:[2,142],158:[2,143],159:[2,144],160:[2,145],161:[2,157],210:[2,99],243:[2,40],279:[2,67],280:[2,68],281:[2,69],285:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

      const { Asignacion } = require("../ArchivosJS/Traductores/Asignacion");
      const { Blanco } = require("../ArchivosJS/Traductores/Blanco");
      const { Bloque } = require("../ArchivosJS/Traductores/Bloque");
      const { Clase } = require("../ArchivosJS/Traductores/Clase");
      const { Codigo } = require("../ArchivosJS/Traductores/Codigo");
      const { Constructor } = require("../ArchivosJS/Traductores/Constructor");
      const { DentroP } = require("../ArchivosJS/Traductores/DentroP");
      const { Do } = require("../ArchivosJS/Traductores/Do");
      const { Else } = require("../ArchivosJS/Traductores/Else");
      const { ElseIf } = require("../ArchivosJS/Traductores/ElseIf");
      const { Exprecion } = require("../ArchivosJS/Traductores/Exprecion");
      const { For } = require("../ArchivosJS/Traductores/For");
      const { Funcion } = require("../ArchivosJS/Traductores/Funcion");
      const { Identificador } = require("../ArchivosJS/Traductores/Identificador");
      const { If } = require("../ArchivosJS/Traductores/If");
      const { Imprimir } = require("../ArchivosJS/Traductores/Imprimir");
      const { Llamado } = require("../ArchivosJS/Traductores/Llamado");
      const { Llamados } = require("../ArchivosJS/Traductores/Llamados");
      const { Mas } = require("../ArchivosJS/Traductores/Mas");
      const { MasId } = require("../ArchivosJS/Traductores/MasId");
      const { Metodo } = require("../ArchivosJS/Traductores/Metodo");
      const { MP } = require("../ArchivosJS/Traductores/MP");
      const { MParametro } = require("../ArchivosJS/Traductores/MParametro");
      const { Parametro } = require("../ArchivosJS/Traductores/Parametro");
      const { Parentesis } = require("../ArchivosJS/Traductores/Parentesis");
      const { Retorno } = require("../ArchivosJS/Traductores/Retorno");
      const { Variable } = require("../ArchivosJS/Traductores/Variable");
      const { While } = require("../ArchivosJS/Traductores/While");
      const { Graficador } = require("../ArchivosJS/Graficador");
      const { Token } = require("../ArchivosJS/Traductores/Token");
      const { Errorer } = require("./Errorer")

      var ER = new Array();
      var traductor = new Graficador()
      var ListaTo = new Array()
      var numError = 1;

      function Agregar(tipo, fila, columna, error){
            ER.push("No. "+numError.toString()+" "+"Tipo: "+tipo+" "+"Fila: "+ fila+" "+"Columna: "+ columna+" "+"Error: "+error);
            numError++;
      }
      var a = 1;
      function AgregarToken(fila, columna, des, to){
            ListaTo.push("No:"+a.toString()+" "+"Fila: "+fila+" "+"Columna: "+columna+" "+"Descripcion: "+des+" "+" "+"Token: "+to);
            a++;
      }

      function Tokens(){
            return ListaTo;
      }

      function Errores(){
            return errores
      }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
break;
case 2:
break;
case 3:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Numero",yy_.yytext); return 34
break;
case 4:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Incremento",yy_.yytext); return 54
break;
case 5:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "MAs",yy_.yytext); return 50
break;
case 6:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Decremento",yy_.yytext); return 55
break;
case 7:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Menos",yy_.yytext); return 51
break;
case 8:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Por",yy_.yytext); return 52
break;
case 9:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Divicion",yy_.yytext); return 53
break;
case 10:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Xor",yy_.yytext); return 45
break;
case 11:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Parentesis que abre",yy_.yytext); return 40
break;
case 12:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Parentesis que cierra",yy_.yytext); return 42
break;
case 13:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Llave que abre",yy_.yytext); return 10
break;
case 14:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Llave que cierra",yy_.yytext); return 12
break;
case 15:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Corchete que abre",yy_.yytext); return 75
break;
case 16:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Corchete que cierra",yy_.yytext); return 76
break;
case 17:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Igual igual",yy_.yytext); return 58
break;
case 18:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Diferente igual",yy_.yytext); return 59
break;
case 19:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Igual",yy_.yytext); return 25
break;
case 20:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Or",yy_.yytext); return 44
break;
case 21:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "And",yy_.yytext); return 47
break;
case 22:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Not",yy_.yytext); return 46
break;
case 23:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Mayor o igual",yy_.yytext); return 56
break;
case 24:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Menor o igual",yy_.yytext); return 57
break;
case 25:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Mayor que",yy_.yytext); return 49
break;
case 26:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Menor que",yy_.yytext); return 48
break;
case 27:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Diagonal Invertida",yy_.yytext); return 'DIGINVER'
break;
case 28:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Coma",yy_.yytext); return 27
break;
case 29:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Punto",yy_.yytext); return 63
break;
case 30:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Punto y Coma",yy_.yytext); return 21
break;
case 31:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada public",yy_.yytext); return 7
break;
case 32:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada class",yy_.yytext); return 13
break;
case 33:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada interface",yy_.yytext); return 14
break;
case 34:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada void",yy_.yytext); return 71
break;
case 35:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada int",yy_.yytext); return 28
break;
case 36:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada double",yy_.yytext); return 30
break;
case 37:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada char",yy_.yytext); return 32
break;
case 38:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada String",yy_.yytext); return 31
break;
case 39:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada for",yy_.yytext); return 84
break;
case 40:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada if",yy_.yytext); return 80
break;
case 41:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada boolean",yy_.yytext); return 29
break;
case 42:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada while",yy_.yytext); return 86
break;
case 43:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada System",yy_.yytext); return 62
break;
case 44:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada out",yy_.yytext); return 64
break;
case 45:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada print",yy_.yytext); return 66
break;
case 46:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada prinln",yy_.yytext); return 67
break;
case 47:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada false",yy_.yytext); return 37
break;
case 48:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada true",yy_.yytext); return 36
break;
case 49:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada do",yy_.yytext); return 88
break;
case 50:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada else",yy_.yytext); return 82
break;
case 51:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada break",yy_.yytext); return 92
break;
case 52:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada continue",yy_.yytext); return 93
break;
case 53:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada break",yy_.yytext); return 94
break;
case 54:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada static",yy_.yytext); return 73
break;
case 55:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada main",yy_.yytext); return 74
break;
case 56:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Reservada arg",yy_.yytext); return 77
break;
case 57:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Identificador",yy_.yytext); return 9
break;
case 58:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Caracter",yy_.yytext); return 38
break;
case 59:AgregarToken(yy_.yylloc.first_line, yy_.yylloc.first_column, "Cadena de texto",yy_.yytext);  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 35; /*//"*/ 
break;
case 60:
break;
case 61:
break;
case 62:return 5
break;
case 63: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        Agregar("Lexico", yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext);
                      
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\\)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:boolean\b)/,/^(?:while\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:flase\b)/,/^(?:true\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:countinue\b)/,/^(?:return\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:arg\b)/,/^(?:[a-zA-Z_$][a-zA-Z_$]*)/,/^(?:[\'][\\]?[a-zA-Z0-9]?[\'])/,/^(?:"[^\"]*")/,/^(?:[\r\t])/,/^(?:\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}